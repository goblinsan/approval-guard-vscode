{
  "name": "approval-guard",
  "displayName": "Approval Guard",
  "publisher": "47 Sunset Studios",
  "version": "0.1.5",
  "license": "Apache-2.0",
  "repository": {
    "type": "git",
    "url": "https://github.com/goblinsan/approval-guard-vscode.git"
  },
  "engines": { "vscode": "^1.90.0" },
  "categories": ["Other"],
  "activationEvents": [
    "onCommand:approvalGuard.createRequest",
    "onCommand:approvalGuard.openStatusPanel",
    "onCommand:approvalGuard.createRequestArgs"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "commands": [
      { "command": "approvalGuard.createRequest", "title": "Approval Guard: Create Request" },
      { "command": "approvalGuard.openStatusPanel", "title": "Approval Guard: Open Status Panel" },
      { "command": "approvalGuard.createRequestArgs", "title": "Approval Guard: Create Request (Args)" },
      { "command": "approvalGuard.testConnection", "title": "Approval Guard: Test Connection" }
    ],
    "languageModelTools": [
      {
        "name": "approval_request",
        "displayName": "Request Slack Approval",
        "toolReferenceName": "approval",
        "canBeReferencedInPrompt": true,
        "modelDescription": "Request human approval in Slack and wait for the decision. MUST provide action field with valid policy action (demo, npm_install, run_migration, update_config, rotate_secret, rerequest_demo). Use BEFORE risky operations. Input: { reason: string, action: 'demo'|'npm_install'|etc }",
        "inputSchema": {
          "type": "object",
          "required": ["reason", "action"],
          "properties": {
            "reason": { "type": "string", "description": "Short explanation of why approval is needed." },
            "action": { 
              "type": "string", 
              "enum": ["demo", "npm_install", "run_migration", "update_config", "rotate_secret", "rerequest_demo"],
              "description": "Explicit action from policy (REQUIRED). Use 'demo' for testing, 'npm_install' for package installs, etc." 
            },
            "params": { "type": "object", "description": "Optional structured parameters for the action." }
          }
        }
      },
      {
        "name": "approval_status",
        "displayName": "Get Approval Status",
        "toolReferenceName": "approvalStatus",
        "canBeReferencedInPrompt": true,
        "modelDescription": "Fetch current status of a prior approval request. Input: { requestId: string }",
        "inputSchema": {
          "type": "object",
          "required": ["requestId"],
          "properties": {
            "requestId": { "type": "string", "description": "Previously returned requestId from approval tool." }
          }
        }
      }
    ],
    "configuration": {
      "title": "Approval Guard",
      "type": "object",
      "properties": {
        "approvalGuard.baseUrl": {
          "type": "string",
          "default": "http://localhost:8080",
          "description": "Base URL of the Approval Guard service."
        },
        "approvalGuard.defaultAction": {
          "type": "string",
          "default": "rerequest_demo",
          "description": "Default action used when none specified."
        },
        "approvalGuard.debugLogging": {
          "type": "boolean",
          "default": false,
          "description": "Enable verbose debug logging to the Approval Guard output channel."
        },
        "approvalGuard.disableAutoAction": {
          "type": "boolean",
          "default": true,
          "description": "If true, do NOT derive scope_* or auto_* actions; require explicit action or scope. Helps avoid policy_denied from unexpected slugs." 
        }
      }
    }
  },
  "scripts": {
    "compile": "tsc -p .",
    "watch": "tsc -w -p .",
    "package": "vsce package",
    "lint": "echo \"(Add ESLint config later)\"",
    "prepublishOnly": "npm run compile"
  },
  "devDependencies": {
    "@types/node": "^20.11.17",
    "@types/vscode": "^1.90.0",
    "typescript": "^5.4.0",
    "vsce": "^2.15.0"
  }
}
